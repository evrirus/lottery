import sqlite3

from aiogram import F, Router, html, types
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.utils.formatting import (Bold, HashTag, as_key_value, as_list,
                                      as_marked_section)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.methods.refund_star_payment import RefundStarPayment
from database import create_user, get_user, give_stars, get_one_relevant_lottery
from icecream import ic

router = Router()

@router.message(CommandStart())
async def first_message(message: types.Message):
    
    user = get_user(message.from_user.id)
    if not user:
        created_user = create_user(message.from_user.id)
        if not created_user['ok']:
            await message.answer(f"ü•∫ –û—Ö, –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n\nüö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á—É—Ç—å –ø–æ–∑–∂–µ. ")
            return
    
    active_lottery_ucode = get_one_relevant_lottery()[0]
    ic(active_lottery_ucode)
    # give_stars(message.from_user.id, 100)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f'participate_{active_lottery_ucode}')
    
    prize_stars = 10
    min_stars_buy = 1
    
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {html.bold("–ó–≤–µ–∑–¥–Ω—É—é –õ–æ—Ç–µ—Ä–µ—é")}!\n\n"
f"üåü –£—á–∞—Å—Ç–≤—É–π –≤ –Ω–∞—à–µ–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–µ –∏ –ø–æ–ª—É—á–∞–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å {html.bold(f"{prize_stars} –∑–≤–µ–∑–¥")}! \n\n"
f"‚ú® –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (—ç—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥) –∏ {html.bold(f"–∫—É–ø–∏—Ç—å {min_stars_buy} –∑–≤—ë–∑–¥")}. \n\n"
"‚è≥ –ö–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –º—ã –ø—Ä–æ–≤–æ–¥–∏–º —Ä–æ–∑—ã–≥—Ä—ã—à, –∏ –æ–¥–∏–Ω —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫ –ø–æ–ª—É—á–∏—Ç –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑! \n\n"
"üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º –∏ –∏—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É! \n\n"
f"{html.bold("–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")}:\n\n"
"1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –±–æ—Ç–µ.\n"
"2. –ö—É–ø–∏ –∑–≤–µ–∑–¥—ã.\n"
"3. –°–ª–µ–¥–∏ –∑–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º! \n\n"
f"{html.bold("–£–¥–∞—á–∏!")}", reply_markup=builder.as_markup(), message_effect_id="5104841245755180586")


# @router.message(Command(commands=['participate', '—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å']))
@router.callback_query(F.data.startswith('participate_'))
async def participate(callback: types.CallbackQuery):
    
    data = callback.data
    ucode = data[len('participate_'):]
    ic(ucode)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–û–ø–ª–∞—Ç–∏—Ç—å 1 ‚≠ê", callback_data=f'pay_1_{ucode}', pay=True)
    
    await message_or_callback(callback, "üéâ –û—Ç–ª–∏—á–Ω–æ! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª(–∞) –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ó–≤–µ–∑–¥–Ω–æ–π –õ–æ—Ç–µ—Ä–µ–µ! \n\n"
"‚ú® –ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å 10 –∑–≤–µ–∑–¥, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ–ø–ª–∞—Ç–∏ 1 –∑–≤–µ–∑–¥—É. \n\n"
"üöÄ –£–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("pay_"))
async def send_invoice_handler(callback: types.CallbackQuery):
    data = callback.data.split("_")
    amount = int(data[1])
    ucode = data[2]
    
    prices = types.LabeledPrice(label=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} ‚≠ê", amount=amount)
    await callback.message.answer_invoice(title="–£—á–∞—Å—Ç–∏–µ –≤ –ª–æ—Ç–µ—Ä–µ–µ", description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ª–æ—Ç–µ—Ä–µ–µ —Å –ø—Ä–∏–∑–æ–º 10 ‚≠ê",
                                 prices=[prices], provider_token="", payload=f"buy_stars_{amount}_{ucode}",
                                 currency="XTR")

@router.pre_checkout_query()
async def on_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    user = get_user(pre_checkout_query.from_user.id)
    ic(pre_checkout_query.invoice_payload)
    
    if user[2] >= 1:
        await pre_checkout_query.answer(ok=True)
    else:
        await pre_checkout_query.answer(ok=False)
    
@router.message(F.successful_payment)
async def on_successful_payment(message: types.Message):
    
    participant = 1
    
    await message.answer(
        f"–ú—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –≤—ã —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º ‚Ññ {participant} –Ω–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è! üôå –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ—Ä–µ—Å! üíñ\n\n"
        )
    
    await message.answer(f"payment-successful. ID of operation: {message.successful_payment.telegram_payment_charge_id}")
    
    
async def message_or_callback(type, message, reply_markup=None, message_effect_id=None):
    if isinstance(type, types.Message):
        await type.answer(message, reply_markup=reply_markup, message_effect_id=message_effect_id)
    elif isinstance(type, types.CallbackQuery):
        await type.message.edit_text(message, reply_markup=reply_markup)
    else:
        raise TypeError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è Message –∏–ª–∏ CallbackQuery")