import sqlite3

from aiogram import F, Router, html, types
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.utils.formatting import (Bold, HashTag, as_key_value, as_list,
                                      as_marked_section)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.methods.refund_star_payment import RefundStarPayment
from database import create_user, get_lottery, get_prize_lottery, get_user, give_stars, get_one_relevant_lottery
from icecream import ic
from aiogram.exceptions import TelegramBadRequest

router = Router()

@router.callback_query(F.data == 'start')
@router.message(CommandStart())
async def first_message(message: types.Message):
    
    user = get_user(message.from_user.id)
    if not user:
        created_user = create_user(message.from_user.id)
        if not created_user['ok']:
            await message_or_callback(
                message, 
                f"ü•∫ –û—Ö, –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n\nüö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á—É—Ç—å –ø–æ–∑–∂–µ. "
                )
            return
    
    active_lottery_ucode = get_one_relevant_lottery()[0]
    ic(active_lottery_ucode)
    # give_stars(message.from_user.id, 100)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f'participate_{active_lottery_ucode}')
    
    lottery = get_lottery(active_lottery_ucode)
    prize_stars = lottery[3]
    
    await message_or_callback(message, f"üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {html.bold("–ó–≤–µ–∑–¥–Ω—É—é –õ–æ—Ç–µ—Ä–µ—é")}!\n\n"
f"üåü –£—á–∞—Å—Ç–≤—É–π –≤ –Ω–∞—à–µ–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–µ –∏ –ø–æ–ª—É—á–∞–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å {html.bold(f"{prize_stars} –∑–≤–µ–∑–¥")}! \n\n"
f"‚ú® –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (—ç—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥) –∏ {html.bold(f"–∫—É–ø–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥")}. \n"
f"{html.blockquote(f"–ß–µ–º –±–æ–ª—å—à–µ –ø–æ—Å—Ç–∞–≤–∏—à—å, —Ç–µ–º {html.bold("–≤—ã—à–µ —à–∞–Ω—Å")} –Ω–∞ –≤—ã–∏–≥—Ä—ã—à.")}\n\n"
"‚è≥ –ö–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –º—ã –ø—Ä–æ–≤–æ–¥–∏–º —Ä–æ–∑—ã–≥—Ä—ã—à, –∏ –æ–¥–∏–Ω —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫ –ø–æ–ª—É—á–∏—Ç –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑! \n\n"
"üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º –∏ –∏—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É! \n\n"
f"{html.bold("–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")}:\n\n"
"1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –±–æ—Ç–µ.\n"
"2. –ö—É–ø–∏ –∑–≤–µ–∑–¥—ã.\n"
"3. –°–ª–µ–¥–∏ –∑–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º! \n\n"

f"{html.bold("–£–¥–∞—á–∏!")}", reply_markup=builder.as_markup(), message_effect_id="5104841245755180586")


# @router.message(Command(commands=['participate', '—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å']))
@router.callback_query(F.data.startswith('participate_'))
async def participate(callback: types.CallbackQuery):
    
    data = callback.data
    ucode = data[len('participate_'):]
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚≠ê 1", callback_data=f'pay_1_{ucode}', pay=True) #! –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ 5 –∑–≤–µ–∑–¥ (1 => 5)
    builder.button(text="‚≠ê 15", callback_data=f'pay_15_{ucode}', pay=True)
    builder.button(text="‚≠ê 25", callback_data=f'pay_25_{ucode}', pay=True)
    builder.button(text="‚≠ê 35", callback_data=f'pay_35_{ucode}', pay=True)
    builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="start")
    builder.adjust(2,2,1)
    
    user = get_user(callback.from_user.id)
    ic(user)
    if user[2] >= 1:
        return await message_or_callback(callback, "üåü –¢—ã —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –ó–≤–µ–∑–¥–Ω–æ–π –õ–æ—Ç–µ—Ä–µ–∏! üåü\n\n"
"‚ú® –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: 10 –∑–≤–µ–∑–¥! ‚ú®\n"
"üöÄ –°–ª–µ–¥–∏ –∑–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –ø–æ–≤–µ–∑–ª–æ –ª–∏ —Ç–µ–±–µ!")
    
    await message_or_callback(callback, "üéâ –û—Ç–ª–∏—á–Ω–æ! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª(–∞) –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ó–≤–µ–∑–¥–Ω–æ–π –õ–æ—Ç–µ—Ä–µ–µ! \n\n"
"‚ú® –ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å 10 –∑–≤–µ–∑–¥, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ–ø–ª–∞—Ç–∏ –∑–≤–µ–∑–¥—ã. \n\n"
"üöÄ –£–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("pay_"))
async def send_invoice_handler(callback: types.CallbackQuery):
    data = callback.data.split("_")
    amount = int(data[1])
    ucode = data[2]
    
    lottery = get_lottery(ucode)
    total_win = lottery[3]
    
    prices = types.LabeledPrice(label=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} ‚≠ê", amount=amount)
    await callback.message.answer_invoice(title="–£—á–∞—Å—Ç–∏–µ –≤ –ª–æ—Ç–µ—Ä–µ–µ", description=f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ª–æ—Ç–µ—Ä–µ–µ —Å –ø—Ä–∏–∑–æ–º {total_win} ‚≠ê",
                                 prices=[prices], provider_token="", payload=f"buy_stars_{amount}_{ucode}",
                                 currency="XTR")

@router.pre_checkout_query()
async def on_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    ic(pre_checkout_query.from_user.id)
    user = get_user(pre_checkout_query.from_user.id)
    ic(pre_checkout_query.invoice_payload)
    ic(user)
    if user:
        await pre_checkout_query.answer(ok=True)
    else:
        await pre_checkout_query.answer(ok=False, error_message="–¢–∞–∫ –Ω–∞–¥–æ.")
    
@router.message(F.successful_payment)
async def on_successful_payment(message: types.Message):
    
    participant = 1
    ic(message.successful_payment.total_amount)
    
    give_stars(message.from_user.id, message.successful_payment.total_amount)
    
    await message.answer(
        f"–ú—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –≤—ã —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º ‚Ññ {participant} –Ω–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!\n\n üôå –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ—Ä–µ—Å! üíñ\n\n"
        )
    
    await message.answer(f"payment-successful. ID of operation: <code>{message.successful_payment.telegram_payment_charge_id}</code>")
    
    
async def message_or_callback(type, message, reply_markup=None, message_effect_id=None):
    if isinstance(type, types.Message):
        await type.answer(message, reply_markup=reply_markup, message_effect_id=message_effect_id)
    elif isinstance(type, types.CallbackQuery):
        await type.message.edit_text(message, reply_markup=reply_markup)
    else:
        raise TypeError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è Message –∏–ª–∏ CallbackQuery")
    
    
    
@router.message(Command("refund-test-payment-charge-id-callback-query-callback-query-query-effect"))
async def cmd_refund(
    message: types.Message,
    command: CommandObject,
):
    transaction_id = command.args
    if transaction_id is None:
        await message.answer(
            text="‚ú® <b>–•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å —Å–≤–æ–∏ –∑–≤–µ–∑–¥–æ—á–∫–∏?</b> ‚ú®\n\n"
"üåü –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ –ø–æ–∫—É–ø–∫—É, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É:\n\n"
"<code>/refund –ö–û–î</code>\n\n"
"‚≠êÔ∏è –ö–û–î - —ç—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –µ–≥–æ:\n\n"
"- –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞\n"
"- –í —Ä–∞–∑–¥–µ–ª–µ \"–ó–≤—ë–∑–¥—ã\" –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram.\n\n"
"üöÄ –£–¥–∞—á–∏!")
        return
    try:

        await message.bot.refund_star_payment(
            user_id=message.from_user.id,
            telegram_payment_charge_id=transaction_id
        )
        await message.answer(
            text="–í–æ–∑–≤—Ä–∞—Ç –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω —É—Å–ø–µ—à–Ω–æ. –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –∑–≤—ë–∑–¥—ã —É–∂–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞—à —Å—á—ë—Ç –≤ Telegram."
        )
    except TelegramBadRequest as error:
        if "CHARGE_NOT_FOUND" in error.message:
            text = "üòî –û—Ö, —Ç–∞–∫–æ–≥–æ –∫–æ–¥–∞ –ø–æ–∫—É–ø–∫–∏ –º—ã –Ω–µ –Ω–∞—à–ª–∏! \n\n"
            "ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ç—ã –≤–≤—ë–ª –∫–æ–¥. –ú–æ–∂–µ—Ç –±—ã—Ç—å, —Ç—ã –æ—à–∏–±—Å—è –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏? "
        elif "CHARGE_ALREADY_REFUNDED" in error.message:
            text = "üåü –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª(–∞) –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ —ç—Ç—É –ø–æ–∫—É–ø–∫—É! üåü\n\n"
            "üí∞ –î–µ–Ω—å–≥–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —Ç–≤–æ–π —Å—á–µ—Ç. \n\n"
            "üéâ –ù–∞–¥–µ–µ–º—Å—è, —Ç—ã —Å–Ω–æ–≤–∞ —Ä–µ—à–∏—à—å –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ó–≤–µ–∑–¥–Ω–æ–π –õ–æ—Ç–µ—Ä–µ–µ!"
        else:
            # –ü—Ä–∏ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö ‚Äì —Ç–∞–∫–æ–π –∂–µ —Ç–µ–∫—Å—Ç,
            # –∫–∞–∫ –∏ –≤ –ø–µ—Ä–≤–æ–º —Å–ª—É—á–∞–µ
            text = "üòî –û—Ö, —Ç–∞–∫–æ–≥–æ –∫–æ–¥–∞ –ø–æ–∫—É–ø–∫–∏ –º—ã –Ω–µ –Ω–∞—à–ª–∏! \n\n"
            "ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ç—ã –≤–≤—ë–ª –∫–æ–¥. –ú–æ–∂–µ—Ç –±—ã—Ç—å, —Ç—ã –æ—à–∏–±—Å—è –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏? "
        await message.answer(text)
        return